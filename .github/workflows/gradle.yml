# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

env:
  S3_BUCKET_NAME: whosbook-deploy-bucket
  WORKING-DIRECTORY: ./server

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set Application Properties
        uses: microsoft/variable-substitution@v1
        with:
          files: ./server/src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.AWS_RDS_ENDPOINT }}
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          spring.security.oauth2.client.registration.google.clientId: ${{ secrets.GOOGLE_CLIENTID }}
          spring.security.oauth2.client.registration.google.clientSecret: ${{ secrets.GOOGLE_SECRET }}
          jwt.key: ${{ secrets.JWT_SECRET_KEY }}
          slack.webhook.url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Add permission
        run: chmod +x gradlew
        working-directory: ${{ env.WORKING-DIRECTORY }}

        # gradle init gradle wrapper 에러를 위한 추가
      - name: init with Gradle
        uses: gradle/gradle-build-action@v2
      - run: gradle init
        working-directory: ${{ env.WORKING-DIRECTORY }}

      - name: Build with Gradle
        run : ./gradlew clean build --exclude-task test
        working-directory: ${{ env.WORKING-DIRECTORY }}
#        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#        with:
#          arguments: build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy
        working-directory: ${{ env.WORKING-DIRECTORY }}

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/
        working-directory: ${{ env.WORKING-DIRECTORY }}

      # appspec.yml Copy
      - name: Copy appspec
        run: cp appspec.yml ./deploy/
        working-directory: ${{ env.WORKING-DIRECTORY }}

      # deploy.sh Copy
      - name: Copy deploy
        run: cp deploy.sh ./deploy/
        working-directory: ${{ env.WORKING-DIRECTORY }}

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./whosbook-deploy.zip ./deploy
        working-directory: ${{ env.WORKING-DIRECTORY }}

      # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
      # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 압축한 프로젝트를 S3로 전송합니다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./whosbook-deploy.zip s3://$S3_BUCKET_NAME/whosbook-deploy.zip
        working-directory: ${{ env.WORKING-DIRECTORY }}

      # CodeDeploy에게 배포 명령을 내립니다.
      - name: Code Deploy
        run: >
          aws deploy create-deployment --application-name whosbook-deploy
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name whosbook-deploy-group
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=whosbook-deploy.zip